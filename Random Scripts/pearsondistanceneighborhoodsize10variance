##Importing User Ratings and storing it in Ratings Dictionary
import math

Ratings_Dict={}
for i in range(1,944):
    Ratings_Dict[i]={}
f=open("u1.base","r")
Ratings=f.readlines()

for i in range(len(Ratings)):
    Ratings[i]=Ratings[i].split("\t")
    for j in range(3):
            Ratings[i][j]=int(Ratings[i][j])
f.close()

for i in Ratings:
        Ratings_Dict[i[0]][i[1]]=i[2]

##Importing Test Ratings and storing it in Test Dictionary
        
Test_Dict={}
for i in range(1,944):
    Test_Dict[i]={}
f=open("u1.test","r")
Ratings=f.readlines()

for i in range(len(Ratings)):
    Ratings[i]=Ratings[i].split("\t")
    for j in range(3):
            Ratings[i][j]=int(Ratings[i][j])
f.close()

for i in Ratings:
        Test_Dict[i[0]][i[1]]=i[2]



##Importing User Information and storing it in Users

f=open("u.user","r")
Users=f.readlines()

for i in range(len(Users)):
    Users[i]=Users[i].split("|")
    
f.close()





# Calculating Variance for each item, storing it in dictionary
# Also Calculating minimum and maximum variance

ItemMean={}
for i1 in range (1,1683):
    meanitem=0.0
    totalitem=0
    for j1 in range (1,944):
        try:
            meanitem=meanitem+Ratings_Dict[j1][i1]
            totalitem=totalitem+1
        except KeyError:
            pass
    try:
        ItemMean[i1]=meanitem/totalitem
    except ZeroDivisionError:
        ItemMean[i1]=0

        
Item_Variance={}   

for i1 in range(1,1683):
    sumnum=0.0
    num=0
    for j1 in range(1,944):        
        try:
            sumnum=sumnum+((Ratings_Dict[j1][i1]-ItemMean[i1])**2)
            num=num+1
        except KeyError:
            pass
    try:
        Item_Variance[i1]=sumnum/num
    except ZeroDivisionError:
        Item_Variance[i1]=0

Variance=Item_Variance.values()
Variance.sort()
Varmin=Variance[0]
Varmax=Variance[len(Variance)-1]
print Varmax,Varmin

Variance_Weights={}


for i1 in range(1,1683):
    Variance_Weights[i1]=(Item_Variance[i1]-Varmin)/Varmax
    



## PearsonDist returns the pearson distance and incorporated variance weighting and significance weighting between two users
def PearsonDist(userA,userB):
    set_intersection=set(Ratings_Dict[userA].keys()).intersection(set (Ratings_Dict[userB].keys()))
    set_intersection=list(set_intersection)
    n=len(set_intersection)    
    sigmaxiyi=0.0
    sigmaxi=0.0
    sigmayi=0.0
    sigmaxisquare=0.0
    sigmayisquare=0.0
    variancesum=0.0

    
    for k in set_intersection:
        sigmaxiyi=sigmaxiyi+(Ratings_Dict[userA][k]*Ratings_Dict[userB][k]*Variance_Weights[k])
        sigmaxi=sigmaxi+(Ratings_Dict[userA][k]*Variance_Weights[k])
        sigmayi=sigmayi+Ratings_Dict[userB][k]
        sigmaxisquare=sigmaxisquare+(Ratings_Dict[userA][k]**2)
        sigmayisquare=sigmayisquare+(Ratings_Dict[userB][k]**2)
        variancesum=variancesum+Variance_Weights[k]

    
    
     
    try:
        A=sigmaxiyi-((sigmaxi*sigmayi)/n)
        B=math.sqrt(sigmaxisquare-((sigmaxi**2)/n))
        C=math.sqrt(sigmayisquare-((sigmayi**2)/n))
        return ((A/(B*C*variancesum))*(n/50))
        
    except ZeroDivisionError:
        return 0
        


# Calculating Pearson Similarities and Storing it in Pearson Distance Dictionary

Pearson_Matrix={}
for i in range(1,944):
    Pearson_Matrix[i]={}
    for j in range(1,944):
        if i!=j:
            Pearson_Matrix[i][j]=PearsonDist(i,j)



# This function returns a list of k nearest users for input user

def k_nearest(user,k):
    kstack={}
    for i in Pearson_Matrix[user].keys():
        kstack[Pearson_Matrix[user][i]]=i
    temp=kstack.keys()
    temp.sort()
    temp.reverse()
    neighbors=[]
    for i in range(0,k):
        neighbors.append(kstack[temp[i]])
    return neighbors


# This stores the global mean of ratings for each user in a dictionary

User_Mean={}

for i in range(1,944):
    rmean=0
    for z in Ratings_Dict[i].keys():
        rmean=rmean+Ratings_Dict[i][z]
    User_Mean[i]=rmean/len(Ratings_Dict[i].keys())
        




# This function generates a recomendation to user for a given movie 
# nearest neighbors, k=5, pearson similarity

def recommender1(user,movie,k):
    neighborhood=k_nearest(user,k)
    numerator=0.0
    denominator=0.0
    
    for x in neighborhood:
        try:
            numerator=numerator+((Ratings_Dict[x][movie]-User_Mean[x])*Pearson_Matrix[user][x])
            denominator=denominator+Pearson_Matrix[user][x]
        except KeyError:
            pass
    try:
        return (User_Mean[user]+(numerator/denominator))
    except ZeroDivisionError:
        return 0
            
       
    
            
# Creating simple RECOMMENDER MATRIX and calculating MAE (pearson coefficient,10 neighbors)

increments=0
MAE1=0.0
for i in range(1,944):
    for j in Test_Dict[i].keys():
        actual_data=Test_Dict[i][j]
        sample_data=recommender1(i,j,10)
        if (sample_data!=0):
            MAE1=MAE1+abs(sample_data-actual_data)
            increments=increments+1
print MAE1/increments
          

         
# MAE (pearson coefficient,10 neighbors,variance) nikla 1.04694592074   
