##Importing User Ratings and storing it in Ratings Dictionary
import math

Ratings_Dict={}
for i in range(1,944):
    Ratings_Dict[i]={}
f=open("u1.base","r")
Ratings=f.readlines()

for i in range(len(Ratings)):
    Ratings[i]=Ratings[i].split("\t")
    for j in range(3):
            Ratings[i][j]=int(Ratings[i][j])
f.close()

for i in Ratings:
        Ratings_Dict[i[0]][i[1]]=i[2]

##Importing Test Ratings and storing it in Test Dictionary
        
Test_Dict={}
for i in range(1,944):
    Test_Dict[i]={}
f=open("u1.test","r")
Ratings=f.readlines()

for i in range(len(Ratings)):
    Ratings[i]=Ratings[i].split("\t")
    for j in range(3):
            Ratings[i][j]=int(Ratings[i][j])
f.close()

for i in Ratings:
        Test_Dict[i[0]][i[1]]=i[2]



##Importing User Information and storing it in Users

f=open("u.user","r")
Users=f.readlines()

for i in range(len(Users)):
    Users[i]=Users[i].split("|")
    
f.close()



## PearsonDist returns the pearson distance and incorporated significance weighting between two users
def PearsonDist(userA,userB):
    set_intersection=set(Ratings_Dict[userA].keys()).intersection(set (Ratings_Dict[userB].keys()))
    set_intersection=list(set_intersection)
    n=len(set_intersection)    
    sigmaxiyi=0.0
    sigmaxi=0.0
    sigmayi=0.0
    sigmaxisquare=0.0
    sigmayisquare=0.0

    
    for k in set_intersection:
        sigmaxiyi=sigmaxiyi+(Ratings_Dict[userA][k]*Ratings_Dict[userB][k])
        sigmaxi=sigmaxi+Ratings_Dict[userA][k]
        sigmayi=sigmayi+Ratings_Dict[userB][k]
        sigmaxisquare=sigmaxisquare+(Ratings_Dict[userA][k]**2)
        sigmayisquare=sigmayisquare+(Ratings_Dict[userB][k]**2)

    
    
     
    try:
        A=sigmaxiyi-((sigmaxi*sigmayi)/n)
        B=math.sqrt(sigmaxisquare-((sigmaxi**2)/n))
        C=math.sqrt(sigmayisquare-((sigmayi**2)/n))
        return ((A/(B*C))*(n/50.0))
        
    except ZeroDivisionError:
        return 0
        


# Calculating Pearson Similarities and Storing it in Pearson Distance Dictionary

Pearson_Matrix={}
for i in range(1,944):
    Pearson_Matrix[i]={}
    for j in range(1,944):
        if i!=j:
            Pearson_Matrix[i][j]=PearsonDist(i,j)



# This function returns a list of neighbors using correlation threshholding (val=0 means all neighbors)



def corr_nearest(user,val):
    neighbors=[]
    if val==0:
        neighbors=Ratings_Dict.keys()
        neighbors.remove(user)
        return neighbors
    else:
        for i in Ratings_Dict.keys():
            if i!=user:
                if (Pearson_Matrix[user][i]>val):
                    neighbors.append(i)
    
        
    return neighbors


# This stores the global mean of ratings for each user in a dictionary

User_Mean={}

for i in range(1,944):
    rmean=0
    for z in Ratings_Dict[i].keys():
        rmean=rmean+Ratings_Dict[i][z]
    User_Mean[i]=rmean/len(Ratings_Dict[i].keys())
        




# This function generates a recomendation to user for a given movie 

def recommender1(user,movie,k):
    neighborhood=corr_nearest(user,k)
    numerator=0.0
    denominator=0.0
    
    for x in neighborhood:
        try:
            numerator=numerator+((Ratings_Dict[x][movie]-User_Mean[x])*Pearson_Matrix[user][x])
            denominator=denominator+Pearson_Matrix[user][x]
        except KeyError:
            pass
    try:
        return (User_Mean[user]+(numerator/denominator))
    except ZeroDivisionError:
        return 0
            
       
    
            
# Creating simple RECOMMENDER MATRIX and calculating MAE neighbors 1-100


increments=0
MAE1=0.0
for i in range(1,944):
     for j in Test_Dict[i].keys():
         actual_data=Test_Dict[i][j]
         sample_data=recommender1(i,j,-100)
         if (sample_data!=0):
            MAE1=MAE1+abs(sample_data-actual_data)
            increments=increments+1

print MAE1/increments

'''         
 MAE Table (pearson coefficient, using significanceweighting, neighbors generated using correlation coefficient )

0.1    0.787196232739
0.2    0.788160224212
0.3    0.799874004474
0.4    0.802221048907
0.5    0.806497610812
Complete neighborhood: 0.999352042128

'''


